///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// ********** STACK using linkedlist ************* dynamic memory allocation of stack **************//
#include</home/abhijeet/Desktop/minor/cpp dsa/3 LINKEDLIST/1.singlyll.cpp>
#include<iostream>
using namespace std;

/* STACk 

////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
Content of file :                                                                                                   ||
1. create stack                                                                                                     ||
2. push()                                                                                                           ||
3. pop()                                                                                                            ||
4. display stack                                                                                                    ||
5. peek()   -- return top element                                                                                   ||
6. isempty()                                                                                                        ||
7. isfull()                                                                                                         ||
.                                                                                                                   ||
*////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////// 1. create stack ///////////////////////////////////////////////////////////////////////////////////////////////////////

// to create the stack using ll , it must follow LIFO principle
// insert node at beginning 
class Stack_ll{
    
};
////////////////////////////////////////  2. push()  ///////////////////////////////////////////////////////////////////////////////////////////////////


////////////////////////////////////////   3.pop()    ////////////////////////////////////////////////////////////////////////////////////////////////////


///////////////////////////////////////   4. peek()   ////////////////////////////////////////////////////////////////////////////////////////////////////

////////////////////////////////////  5. Display  /////////////////////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////  6. isempty() ///////////////////////////////////////////////////////////////////////////////////////////////////



//////////////////////////////////////   7. isfull() ////////////////////////////////////////////////////////////////////////////////////////////////////



int main(){
    
    int n;
    cout << "enter ll size :";
    cin >> n;
    cout << "enter data elements : ";
    int data_array[n];
    for (int i = 0; i < n; i++)
    {
        cin >> data_array[i];
    }
    SinglyNode *s;
    s = create_nNodes(n , data_array);
    Display_ll(s);

   return 0;
}